
import java.awt.Frame;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * 
 * This is the welcome window that pops up when people open the app
 */

/**
 *
 * @author Armand Nokbak
 */
public class Home_Page extends javax.swing.JFrame {

    /**
     * Creates new form Home_Page
     */
    public Home_Page() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        passwordLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        usernameLabel1 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        passwordTextField = new javax.swing.JPasswordField();
        stopTEServerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trade Net Brokerage System");
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        passwordLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        passwordLabel.setText("Password :");

        usernameTextField.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        usernameTextField.setName(""); // NOI18N

        usernameLabel1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        usernameLabel1.setText("Username :");

        loginButton.setBackground(new java.awt.Color(255, 255, 255));
        loginButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        loginButton.setMnemonic('l');
        loginButton.setText("Login");
        loginButton.setBorder(null);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        passwordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loginButton, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                    .addComponent(passwordTextField))
                .addGap(70, 70, 70))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(80, 80, 80)
                    .addComponent(usernameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(289, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(83, 83, 83)
                    .addComponent(usernameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(199, Short.MAX_VALUE)))
        );

        stopTEServerButton.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        stopTEServerButton.setMnemonic('s');
        stopTEServerButton.setText("Stop Trade Execution Server");
        stopTEServerButton.setEnabled(false);
        stopTEServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopTEServerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(400, 400, 400)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(stopTEServerButton)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(242, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(stopTEServerButton)
                .addGap(182, 182, 182))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        /**
                     * some of the client definition is inspired from the code
                     * found on
                     * http://www.journaldev.com/741/java-socket-server-client-read-write-example
                     *
                     * CLIENT DEFINITION
        *
                     */
                    try {
                        InetAddress host = InetAddress.getLocalHost();
                        Socket clientSocket = null;
                        ObjectOutputStream clientOutputStream = null;
                        ObjectInputStream clientInputStream = null;

                        //establish socket connection to server
                        clientSocket = new Socket(host.getHostName(), 1026);
                        //enable stopAMServer button
                        stopTEServerButton.setEnabled(true);
                        //write to socket using ObjectOutputStream
                        clientOutputStream = new ObjectOutputStream(clientSocket.getOutputStream());
                        //converting password to md5
                        String md5Pwd = convertPasswordToMD5(passwordTextField.getText());
                        //checking user credentials
                        clientOutputStream.writeObject("login " + usernameTextField.getText() + " " + md5Pwd);
                        
                        //read from socket to ObjectInputStream object
                        clientInputStream = new ObjectInputStream(clientSocket.getInputStream());
                        //convert ObjectInputStream object to String
                        //this is the response from the AM server that should be passed on to the Trade Net brokerage client
                        String responseMessage = (String) clientInputStream.readObject();
                        
                        System.out.println("SUCCESS "+ responseMessage);
                        
                        if(responseMessage.equalsIgnoreCase("valid")){
                            Trade_Net_UI page2 = new Trade_Net_UI();
                            page2.setExtendedState(JFrame.MAXIMIZED_BOTH);
                            page2.show();
                            this.hide();
                        }
                        else{
                            showMessage("User invalid!\nMake sure you enter the right credentials");
                        }
                        
                        /**
                         * MAKE IF STATEMENT TO OPEN FOLLOWING PAGE.....
                         */

                        
                        //closing streams
                        clientInputStream.close();
                        clientOutputStream.close();
                        clientSocket.close();

                    } catch (UnknownHostException ex) {
                        showMessage("UnKnown Host");
                    } catch (IOException ex) {
                        showMessage("Did you start the AM Server?");
                    } catch (ClassNotFoundException ex) {
            Logger.getLogger(Home_Page.class.getName()).log(Level.SEVERE, null, ex);
        }
                    /**
                     * END OF CLIENT DEFINITION
                     */
    }//GEN-LAST:event_loginButtonActionPerformed

    private void stopTEServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopTEServerButtonActionPerformed
        /**
         * some of the client definition is inspired from the code found on
         * http://www.journaldev.com/741/java-socket-server-client-read-write-example
        * *
         */
        try {
            InetAddress host = InetAddress.getLocalHost();
            Socket socket = null;
            ObjectOutputStream outputStream = null;
            ObjectInputStream inputStream = null;

            //establish socket connection to server
            socket = new Socket(host.getHostName(), 1026);
            //write to socket using ObjectOutputStream
            outputStream = new ObjectOutputStream(socket.getOutputStream());
            outputStream.writeObject("exit");

            //inputStream.close();
            outputStream.close();
            socket.close();

        } catch (UnknownHostException ex) {
            showMessage("UnKnow Host");
        } catch (IOException ex) {
            showMessage("IO exception");
        }
    }//GEN-LAST:event_stopTEServerButtonActionPerformed

    private void passwordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTextFieldActionPerformed
        //so when user hits "enter" from the password field, the login button is clicked
        loginButton.doClick();
    }//GEN-LAST:event_passwordTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new Home_Page();
                frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
                frame.setVisible(true);
            }
        });
    }
    
    /**
     * displays an error message
     *
     * @param errorMessage
     */
    private void showMessage(String errorMessage) {

        JOptionPane.showMessageDialog(null, errorMessage, "Alert", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * this method takes in a password and returns its MD5 value
     * inspired from code at http://www.mkyong.com/java/java-md5-hashing-example/
     * 
     * @param password
     * @return 
     */
    public String convertPasswordToMD5(String password){
        StringBuffer sb = null;
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            
            byte byteData[] = md.digest();
            
            //convert the byte to hex format method 1
            sb = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
            
            
        } catch (NoSuchAlgorithmException ex) {
            showMessage("Could not encrypt password!");
        }

        return sb.toString();
    }

    /**
     * displays an information message
     *
     * @param errorMessage
     */
    private void showInfoMessage(String errorMessage) {

        JOptionPane.showMessageDialog(null, errorMessage, "Information", JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton stopTEServerButton;
    private javax.swing.JLabel usernameLabel1;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
